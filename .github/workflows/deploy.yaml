name: Deploy MCP server to AWS Lambda
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -t package

      - name: Package application
        run: |
          cp server.py package/
          cd package
          zip -r ../function.zip .

      - name: Install AWS CLI
        run: |
          python -m pip install awscli

      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          ROLE_ARN: ${{ secrets.LAMBDA_ROLE_ARN }}
        run: |
          if aws lambda get-function --function-name "$FUNCTION_NAME" --region "$AWS_DEFAULT_REGION"; then
            aws lambda update-function-code --function-name "$FUNCTION_NAME" --zip-file fileb://function.zip --region "$AWS_DEFAULT_REGION"
          else
            aws lambda create-function --function-name "$FUNCTION_NAME" --runtime python3.11 --handler server.handler --zip-file fileb://function.zip --role "$ROLE_ARN" --region "$AWS_DEFAULT_REGION"
          fi

      - name: Create or update Lambda Function URL
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
        run: |
          if aws lambda get-function-url-config --function-name "$FUNCTION_NAME" --region "$AWS_DEFAULT_REGION" >/dev/null 2>&1; then
            echo "Function URL already exists; leaving it unchanged."
          else
            aws lambda create-function-url-config --function-name "$FUNCTION_NAME" --auth-type NONE --region "$AWS_DEFAULT_REGION"
            echo "Function URL created."
          fi
          aws lambda get-function-url-config --function-name "$FUNCTION_NAME" --region "$AWS_DEFAULT_REGION" --query FunctionUrl --output text
